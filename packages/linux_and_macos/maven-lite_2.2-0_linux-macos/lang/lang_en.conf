# Language configuration file for English
# Format:
# key = value # Comment

# If you want to add a new language, you can copy this file and rename it by replacing lang_fr with the language code.
# Then, you can translate the values of each key.

# General
langName = English
success = success
info = info
warning = warning
error = error

# Keywords
from = from
to = to
for = for
and = and
by = by
or = or
option = option
options = Options
loption = the option
fichier = The file
dossier = The folder
project = the project
usage = Usage
argument = Argument
unknown = unknown
careful = caution
compile = Compile
launch = Launch
alreadyExist = already exists
notExist = does not exist
nbArgs = Number of arguments
defaultValue = Default value
fullDoc = Full documentation
createdSuccess = has been successfully created
compilation = Project compilation
launching = Project launch
launchingJar = Launching the jar file
seeHelp = display help
executeCommand = execute the command
notFolder = is not a folder
sourceProject = Source folder of the project
useCommand = Use the command
needArgument = requires an argument
hasClear = has been cleared

# Sentences
availableLangDesc = Available languages  
availableLang = French (fr), English (en), German (de), Spanish (es), Italian (it)
successChangeLang = Language change successfully applied
targetProject = Output folder for the compiled project files
librariesProject = List of libraries to add to the classpath
configData = from the configuration file data
desinstall = Uninstalling Maven Lite...
desinstallConfirm = you are about to uninstall Maven Lite. Are you sure you want to continue?
canceledDesinstallation = Uninstallation canceled
deletingManPage = Deleting manual pages in different languages...
successDeletingManPage = Manual pages successfully deleted
failureReading = Failure while reading
failureWriting = Failure while writing
failureCreating = Failure while creating
failureDeleting = Failure while deleting
failureCoping = Failure while copying
failureRemovingFolder = Failure while deleting the folder
failureCompilation = Failure while compiling the project
failureLaunch = Failure while launching the project
failureLaunchJar = Failure while launching the jar file
failureCommand = Failure while executing the command
successDeleting = Success while deleting
successCompilation = Success while compiling the project
successLaunch = Success while launching the project
successLaunchJar = Success while launching the jar file
mainNotFind = Unable to find the main class of the project. You can specify the main class with the option
argumentWarning = If the argument starts with the character '-', please escape the character '-' with two `\` like this:

# Description des arguments
arg_file = Load options from a configuration file.
arg_create = Create project structure and a default configuration file.
arg_mvc_1 = Specify for the
arg_mvc_2 = option to create an MVC project structure.
arg_compilation = Compile the project.
arg_launch = Launch the project.
arg_compile-launch = Compile and launch the project. (equivalent to -c -l)
arg_launch-compile = Compile and launch the project. (equivalent to -c -l)
arg_quiet = Suppress java output in the terminal during project execution.
arg_verbose = Display executed commands.
arg_exclude = Exclude java files and directories from compilation. If you want to pass an argument starting with '-', escape the '-' character with two `\` like this: '-ex \\-file'.
arg_compile-jar = Create a jar file for your project. You can specify the name of the jar file to create. If you don’t specify a name, the jar file will be named after the project.
arg_launch-jar = Launch an executable jar file. You can specify the name of the jar file to launch. If you don’t specify a name, the jar file will be named after the project.
arg_integrate-test = Integrate unit tests into the project.
arg_create-file = Allows creating a configuration file from command line options. You can specify the name of the configuration file to be created.
arg_source = Folder containing java files to compile.
arg_target = Output folder for compiled files. This folder will be created if it does not exist and will be automatically added to the classpath during compilation and execution.
arg_resources = Folder containing resource files to copy into the output folder for compiled files when creating a jar file.
arg_classpath = Specify the classpath to use during compilation and execution. If you want to add multiple elements to the classpath, separate them with ':'.
arg_libraries = Folder containing jar files used by the program. All jar files will be added to the classpath during compilation and execution.
arg_arguments = All arguments to pass to the main class. If you want to pass an argument starting with '-', escape the '-' character with two `\` like this: '-args \\-argument_for_main'.
arg_main = Main class to launch. If you want to launch a class in a package, specify the package with the class name like this: 'package.name.MainClass'
arg_encoding = Change the encoding of the java files to be compiled.
arg_export = Create an executable jar file to launch the project without installing MavenLite.
arg_maven = Convert the project to a Maven project by creating a pom.xml file and moving files if necessary.
arg_version = Display the version.
arg_help = Display help and exit.
arg_clear = Delete files in the output folder for compiled files.
arg_add-compile-option = Add an option to java during compilation. Caution, no verification is done on the option, so be careful about what you add.
arg_add-launch-option = Add an option to java during execution. Caution, no verification is done on the option, so be careful about what you add.
arg_language = Displays the list of available languages if no argument is passed. If an argument is passed, it allows changing the application’s language : mvnl -lang fr
