.TH "Maven Lite" "1" "Janvier 2024" "Maven Lite Version 2.0.0" "User Commands"
.hy
.SH NOM
mvnl - Gestionnaire de projet Java simple et léger inspiré du
gestionnaire de projet \f[CR]Maven\f[R].
.SH SYNOPSIS
mvnl [OPTION]...
[ARGUMENT]...
.SH DESCRIPTION
Permet de compiler et lancer un projet Java en utilisant le minimum
d\[aq]options et de manipulations.
Facilite la compilation et le lancement d\[aq]un projet Java plus
simplement que Maven.
.PP
L\[aq]ordre des options n\[aq]a pas d\[aq]importance.
.PP
Si une option est utilisée plusieurs fois, seule la dernière est prise
en compte sauf pour les options qui prennent plusieurs arguments comme
--arguments, --classpath et --exclude.
.PP
Nous vous conseillons vivement d\[cq]utiliser l\[cq]arborecence par
défaut générée par la commande \f[CR]mvnl --create\f[R].
Cela vous permettra de compiler et lancer votre projet Java sans avoir
de fichier de configuration ni d\[cq]options à spécifier dans la ligne
de commande à l\[cq]exception de l\[cq]option -c et -l.
.SH EXEMPLES
.IP \[bu] 2
\f[CR]mvnl -s src -t target -c -e UTF-8\f[R] --> compile le projet Java
avec l\[aq]encodage UTF-8 qui se trouve dans le dossier src et met les
fichiers compilés dans le dossier target.
.IP \[bu] 2
\f[CR]mvnl -s src -t target -m package.Main -cl\f[R] --> compile et
lance le projet Java qui se trouve dans le dossier src et met les
fichiers compilés dans le dossier target, puis lance la classe
package.Main.
.IP \[bu] 2
\f[CR]mvnl -s src -t target -m package.Main -lc -args \[dq]argument 1\[dq] \[dq]argument 2\[dq]\f[R]
--> compile et lance le projet Java qui se trouve dans le dossier src et
met les fichiers compilés dans le dossier target, puis lance la classe
package.Main avec les arguments \f[CR]argument 1\f[R] et
\f[CR]argument 2\f[R] dans l\[aq]ordre de passage à la commande.
.IP \[bu] 2
\f[CR]mvnl -m package.Main -l -cp target lib\f[R] --> lance la classe
package.Main en ajoutant le dossier target et le dossier lib au
classpath du projet.
.IP \[bu] 2
\f[CR]mvnl -m Main -lib lib -l\f[R] --> lance la classe Main en ajoutant
tous les fichiers JAR du dossier lib et ses sous dossier au classpath du
projet.
.IP \[bu] 2
\f[CR]mvnl -f config.txt -cl\f[R] --> charge les options à partir du
fichier config.txt.
Contenu du fichier config.txt :
\f[CR]-s src -t target -m package.Main\f[R].
Compile et lance le projet Java qui se trouve dans le dossier src et met
les fichiers compilés dans le dossier bin, puis lance la classe
package.Main.
.SH COMPORTEMENT PAR DÉFAUT
Par défaut, si aucune option n\[aq]est spécifiée, la commande
\f[CR]mvnl\f[R] affiche une vue stylisée de l\[cq]affichage de la
commande \f[CR]mvnl --version\f[R].
.SH OPTIONS
.SS Toutes les options
Usage : mvnl options [argument]
.PP
Options : -f , --file Permet de charger les options à partir d\[cq]un
fichier de configuration.
En savoir plus : Nombre de d\[cq]arguments : de 0 à 1.
Valeur par défaut : LPOM.conf.
.PP
-cr , --create Créer l\[cq]arborescence du projet ainsi qu\[cq]un
fichier de config par défaut.
Nombre de d\[cq]arguments : de 0 à 1.
Valeur par défaut : NewProject.
.PP
-mvc , --model-view-controllerPermet de spécifier à l\[cq]option
`\[en]create' de créer l\[cq]arborescence d\[cq]un projet MVC.
Nombre de d\[cq]argument : 0.
.PP
-c , --compilation Compile le projet.
Nombre de d\[cq]argument : 0.
.PP
-l , --launch Lance le projet.
Nombre de d\[cq]argument : 0.
.PP
-cl , --compile-launch Compile et lance le projet.
(équivalent à -c -l) Nombre de d\[cq]argument : 0.
.PP
-lc , --launch-compile Compile et lance le projet.
(équivalent à -c -l) Nombre de d\[cq]argument : 0.
.PP
-q , --quiet Permet de supprimer l\[cq]affichage de java dans le
terminal lors de l\[cq]exécution du projet.
Nombre de d\[cq]argument : 0.
.PP
-v , --verbose Permet d\[cq]afficher les commandes exécutées.
Nombre de d\[cq]argument : 0.
.PP
-ex , --exclude Permet d\[cq]exclure des fichiers java et des dossiers
de la compilation.
Si vous voulez passé un argument qui commencer par `-' échapper le
caractère `-' avec deux `\[aq] comme ceci :'-ex \[rs]-fichier\[cq].
Nombre de d\[cq]argument : unlimited.
.PP
-cj , --compile-jar Permet de créer un fichier jar de votre projet.
Vous pouvez spécifier le nom du fichier jar à créer.
Si vous ne spécifiez pas de nom, le nom du fichier jar sera le nom du
projet.
Nombre de d\[cq]arguments : de 0 à 1.
.PP
-lj , --launch-jar Permet de lancer un fichier jar exécutable.
Vous pouvez spécifier le nom du fichier jar à lancer.
Si vous ne spécifiez pas de nom, le nom du fichier jar sera le nom du
projet.
Nombre de d\[cq]arguments : de 0 à 1.
.PP
-it , --integrate-test Permet d\[cq]intégrer les tests unitaires au
projet.
Nombre de d\[cq]argument : 0.
.PP
-s , --source Dossier contenant les fichiers java à compiler.
Nombre de d\[cq]argument : 1.
Valeur par défaut : src/main/java.
.PP
-t , --target Dossier de sortie des fichiers compilés.
Ce dossier sera créer si il n\[cq]existe pas et sera automatiquement
ajouter au classpath lors de la compilation et du lancement.
Nombre de d\[cq]argument : 1.
Valeur par défaut : target.
.PP
-r , --resources Dossier contenant les fichiers ressources à copier dans
le dossier de sortie des fichiers compilés dans le cas de la création
d\[cq]un fichier jar.
Nombre de d\[cq]argument : 1.
Valeur par défaut : src/resources.
.PP
-cp , --classpath Permet de spécifier le classpath à utiliser lors de la
compilation et du lancement.
Si vous voulez ajouter plusieurs éléments au classpath, il faut les
séparer par des `:'.
Nombre de d\[cq]argument : unlimited.
.PP
-lib , --libraries Dossier contenant les fichiers jar utiliser par le
programme.
Tout les fichiers jar seront ajoutés au classpath lors de la compilation
et du lancement.
Nombre de d\[cq]arguments : de 0 à 1.
Valeur par défaut : src/resources/lib.
.PP
-args, --arguments Tous les arguments à passer à la classe principale.
Si vous voulez passé un argument qui commencer par `-' échapper le
caractère `-' avec deux `\[aq] comme ceci :'-args
\[rs]-argument_pour_le_main\[cq].
Nombre de d\[cq]argument : unlimited.
.PP
-m , --main Classe principale à lancer.
Si vous voulez lancer une classe qui se trouve dans un package, il faut
spécifier le package avec le nom de la classe comme ceci :
`package.nom.MainClass' Nombre de d\[cq]argument : 1.
.PP
-e , --encoding Permet de changer l\[cq]encodage des fichiers java à
compiler.
Nombre de d\[cq]argument : 1.
Valeur par défaut : UTF-8.
.PP
-exp , --export Permet de créer un fichier jar exécutable permettant de
lancer le projet sans avoir installer MavenLite.
Nombre de d\[cq]arguments : de 0 à 1.
Valeur par défaut : run.java.
.PP
-mvn , --maven Convertie le projet en projet maven en créant un fichier
pom.xml et en déplaçant les fichiers si nécessaire.
Nombre de d\[cq]argument : 0.
.PP
-V , --version Affiche la version.
Nombre de d\[cq]argument : 0.
Valeur par défaut : 2.0.0.
.PP
-h , --help Affiche l\[cq]aide et quitte.
Nombre de d\[cq]argument : 0.
.PP
-clr , --clear Permet de supprimer les fichiers dans le dossier de
sortie des fichiers compilés.
Nombre de d\[cq]argument : 0.
.PP
-lang , --language Affiche la liste des langues disponibles si
aucun argument n'est passé. Si un argument est passé, il permet
de changer la langue de l'application : mvnl -lang en
.SH CODES DE RETOUR
0 : Tout s\[aq]est bien passé.
.PP
1 : Une erreur est survenue.
.SH FICHIERS
Maven Lite est constitué de 6 fichiers :
.IP \[bu] 2
\f[CR]\[aq]mvnl\[aq]\f[R], le fichier principal qui se situe dans le
dossier \f[CR]\[aq]/usr/local/bin/\[aq]\f[R].
.IP \[bu] 2
\f[CR]\[aq]mvnl-uninstall\[aq]\f[R], le fichier de désinstallation qui
se situe dans le dossier \f[CR]\[aq]/usr/local/bin/\[aq]\f[R].
.IP \[bu] 2
\f[CR]\[aq]MavenLite.class\[aq]\f[R], le fichier de la classe MavenLite
qui se situe dans le dossier
\f[CR]\[aq]/usr/local/etc/maven-lite\[aq]\f[R].
.IP \[bu] 2
\f[CR]\[aq]hamcrest-core-1.3.jar\[aq]\f[R], le fichier JAR de la
librairie Hamcrest-Core qui se situe dans le dossier
\f[CR]\[aq]/usr/local/etc/maven-lite\[aq]\f[R].
.IP \[bu] 2
\f[CR]\[aq]junit-4.13.1.jar\[aq]\f[R], le fichier JAR de la librairie
JUnit qui se situe dans le dossier
\f[CR]\[aq]/usr/local/etc/maven-lite\[aq]\f[R].
.IP \[bu] 2
\f[CR]\[aq]mvnl.1.gz\[aq]\f[R], le fichier d\[aq]aide contenant la page
de manuel affichée avec la commande \f[CR]\[aq]man mvnl\[aq]\f[R] qui se
situe dans le dossier \f[CR]\[aq]/usr/local/man/fr/man1/\[aq]\f[R] pour
la version française et dans le dossier
\f[CR]\[aq]/usr/local/man/en/man1/\[aq]\f[R] pour la version anglaise.
.SH BOGUES
Il y a un seul bogue connu qui concerne les arguments avec des
guillemets antislashs, etc.
.SH AUTEUR
Écrit par Robart Floris.
.SH RAPPORT DE BOGUES
Reporter les bogues par mail à l\[aq]adresse
<florisrobart.pro\[at]gmail.com> en précisant quel est le bogue, comment
puis-je le reproduire et qu\[aq]il concerne Maven Lite ainsi que la
version utilisé.
