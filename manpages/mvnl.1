.\" Automatically generated by Pandoc 3.1.8
.\"
.TH "" "" "" "" ""
.SH Maven Lite
Permet de compiler et lancer un projet java en utilisant le minimum
d\[cq]options et de manipulation.
Facilite la compilation et le lancement d\[cq]un projet java plus
simplement que maven.
.PP
Toutes les options prennent un seul argument sauf -c et -l qui n\[cq]en
prennent aucun.
.PP
L\[cq]ordre des options n\[cq]a pas d\[cq]importance sauf pour
l\[cq]option -f qui doit être la première option de la ligne de
commande.
les guillements double ne sont pas obligatoires, sauf si l\[cq]argument
contient un espace
.PP
Les options qui sont utilisé avec -c alors qu\[cq]elles sont utilisable
uniquement avec -l sont ignorées et inversement.
Les options qui sont utilisable avec -c ou -l sont utilisable avec -cl
et -lc.
.PP
Les arguments obligatoires pour les options longues le sont aussi pour
les options courtes :
.PP
-v , \[en]version Afficher la version et quitter.
.PP
-s , \[en]source Dossier racine du projet à compiler.
.PP
-o , \[en]output Dossier de sortie des fichiers compilés.
.PP
-cp , \[en]classpath Liste des fichiers jar et du dossier de sortie des
fichiers compilés (le même dossier que pour l\[cq]option -o) à ajouter
au classpath lors de la compilation et du lancement.
Les fichiers jar doivent être séparés par des `:'.
La valeur par defaut du classpath est le dossier de sortie des fichiers
compilés si l\[cq]option -o est utilisé, sinon le classpath sera le
dossier courent.
.PP
-d , \[en]dependency Dossier contenant les fichiers jar utiliser par le
programme.
Tout les fichiers jar seront ajoutés au classpath lors de la compilation
et du lancement.
.PP
-n , \[en]name Permet de changer le nom du fichier contenant les chemins
des fichiers java à compiler.
Le nom par defaut est `compile.list'.
Utilisable uniquement avec l\[cq]option -c.
.PP
-e , \[en]encoding Permet de changer l\[cq]encodage des fichiers java à
compiler.
L\[cq]encodage par defaut est `UTF-8'.
Utilisable uniquement avec l\[cq]option -c.
.PP
-m , \[en]main Classe principale à lancer.
Utilisable uniquement avec l\[cq]option -l.
.PP
-dt , \[en]data Dossier contenant les données du projet.
Permet de copier le dossier de données dans le dossier de sortie.
Utilisable uniquement avec l\[cq]option -c.
.PP
-arg, \[en]arguments Arguments à passer à la classe principale.
Un argument par option, c\[cq]est à dire que si vous voulez passer deux
arguments il faudra utiliser deux fois l\[cq]option -arg.
Lordre des arguments passé à la classe principale est le même que
l\[cq]ordre de passage à la commande.
Les arguments de la ligne de commande sont pris en compte avant les
arguments du fichier de configuration.
Les arguments ne peuvent pas contenir d\[cq]espace sans peine de bug.
Utilisable uniquement avec l\[cq]option -l.
.PP
-f , \[en]file Fichier de configuration.
Permet de charger les options à partir d\[cq]un fichier de
configuration, le séparateur sont l\[cq]espace et le retour à la ligne.
Les options du fichier de configuration prédomine sur les options de la
ligne de commande.
L\[cq]option -f doit obligatoirement être la première option de la ligne
de commande.
.PP
-c , \[en]compilation Compiler le projet.
.PP
-l , \[en]launch Lancer le projet.
.PP
-cl , \[en]compile-launch Compiler et lancer le projet.
(équivalent à -c -l)
.PP
-lc , \[en]launch-compile Compiler et lancer le projet.
(équivalent à -c -l)
.PP
-h , \[en]help afficher l\[cq]aide et quitter.
.PP
Les options obligatoires pour la compilation sont : -s, \[en]source
Dossier racine du projet à compiler.
-o, \[en]output Dossier de sortie des fichiers compilés.
-c, \[en]compilation Compiler le projet.
.PP
Les options obligatoires pour le lancement sont : -m , \[en]main Classe
principale à lancer.
-l , \[en]launch Lancer le projet.
-cp, \[en]classpath Voir l\[cq]option -cp dans listes des options.
.PP
Les options obligatoires pour la compilation et le lancement sont : -s ,
\[en]source Dossier racine du projet à compiler.
-o , \[en]output Dossier de sortie des fichiers compilés.
-m , \[en]main Classe principale à lancer.
-cl, \[en]compile-launch Compiler et lancer le projet.
(équivalent à -c -l)
.PP
Exemple d\[cq]utiliation : `mvnl -s src -o ./bin -m
\[lq]controleur.Main\[rq] -cl' Cette ligne de commande va compiler et
lancer le projet java contenu dans le dossier `src' et lancer la classe
`controleur.Main' avec le classpath `./bin'.
Tout les fichiers compilés seront dans le dossier `bin'.
