.TH "Maven Lite" "1" "January 2024" "Maven Lite Version 2.0.0" "User Commands"
.hy
.SH NAME
mvnl - Simple and lightweight Java project manager inspired by the
\f[CR]Maven\f[R] project manager.
.SH SYNOPSIS
mvnl [OPTION]...
[ARGUMENT]...
.SH DESCRIPTION
Allows compiling and running a Java project with minimal options and
manipulations.
Facilitates the compilation and execution of a Java project more
straightforwardly than Maven.
.PP
The order of options does not matter.
.PP
If an option is used multiple times, only the last one is considered,
except for options that take multiple arguments such as --arguments,
--classpath, and --exclude.
.PP
We strongly recommend using the default directory structure generated by
the \f[CR]mvnl --create\f[R] command.
This allows you to compile and run your Java project without having a
configuration file or specifying options on the command line, except for
the -c and -l options.
.SH EXAMPLES
.IP \[bu] 2
\f[CR]mvnl -s src -t target -c -e UTF-8\f[R] --> compiles the Java
project with UTF-8 encoding located in the src folder and places the
compiled files in the target folder.
.IP \[bu] 2
\f[CR]mvnl -s src -t target -m package.Main -cl\f[R] --> compiles and
launches the Java project located in the src folder, places the compiled
files in the target folder, and then launches the package.Main class.
.IP \[bu] 2
\f[CR]mvnl -s src -t target -m package.Main -lc -args \[dq]argument 1\[dq] \[dq]argument 2\[dq]\f[R]
--> compiles and launches the Java project located in the src folder,
places the compiled files in the target folder, then launches the
package.Main class with the arguments \f[CR]argument 1\f[R] and
\f[CR]argument 2\f[R] in the order passed to the command.
.IP \[bu] 2
\f[CR]mvnl -m package.Main -l -cp target lib\f[R] --> launches the
package.Main class by adding the target folder and the lib folder to the
project\[cq]s classpath.
.IP \[bu] 2
\f[CR]mvnl -m Main -lib lib -l\f[R] --> launches the Main class by
adding all JAR files in the lib folder and its subfolders to the
project\[cq]s classpath.
.IP \[bu] 2
\f[CR]mvnl -f config.txt -cl\f[R] --> loads options from the config.txt
file.
Content of the config.txt file:
\f[CR]-s src -t target -m package.Main\f[R].
Compiles and launches the Java project located in the src folder, places
the compiled files in the bin folder, then launches the package.Main
class.
.SH DEFAULT BEHAVIOR
By default, if no options are specified, the \f[CR]mvnl\f[R] command
displays a stylized view of the \f[CR]mvnl --version\f[R] command
output.
.SH OPTIONS
.SS All options
Usage: mvnl options [argument]
.PP
Options: -f , --file Load options from a configuration file.
More information: Number of arguments: 0 to 1.
Default value: LPOM.conf.
.PP
-cr , --create Create the project tree and a default configuration file.
Number of arguments: 0 to 1.
Default value: NewProject.
.PP
-mvc , --model-view-controllerSpecify for the `\[en]create' option to
create the tree structure of an MVC project.
Number of arguments: 0.
.PP
-c , --compilation Compile the project.
Number of arguments: 0.
.PP
-l , --launch Launch the project.
Number of arguments: 0.
.PP
-cl , --compile-launch Compile and launch the project.
(equivalent to -c -l) Number of arguments: 0.
.PP
-lc , --launch-compile Compile and launch the project.
(equivalent to -c -l) Number of arguments: 0.
.PP
-q , --quiet Suppress java output in the terminal during project
execution.
Number of arguments: 0.
.PP
-v , --verbose Display executed commands.
Number of arguments: 0.
.PP
-ex , --exclude Exclude java files and folders from compilation.
If you want to pass an argument that starts with `-', escape the `-'
character with two `\[rs]' like this: `-ex \[rs]-file'.
Number of arguments: unlimited.
.PP
-cj , --compile-jar Create a JAR file for your project.
You can specify the name of the JAR file to create.
If you do not specify a name, the JAR file will be named after the
project.
Number of arguments: 0 to 1.
.PP
-lj , --launch-jar Launch an executable JAR file.
You can specify the name of the JAR file to launch.
If you do not specify a name, the JAR file will be named after the
project.
Number of arguments: 0 to 1.
.PP
-it , --integrate-test Integrate unit tests into the project.
Number of arguments: 0.
.PP
-s , --source Folder containing java files to compile.
Number of arguments: 1.
Default value: src/main/java.
.PP
-t , --target Output folder for compiled files.
This folder will be created if it does not exist and will be
automatically added to the classpath during compilation and launch.
Number of arguments: 1.
Default value: target.
.PP
-r , --resources Folder containing resource files to copy into the
output folder for compiled files in the case of creating a JAR file.
Number of arguments: 1.
Default value: src/resources.
.PP
-cp , --classpath Specify the classpath to use during compilation and
launch.
If you want to add multiple elements to the classpath, separate them
with `:'.
Number of arguments: unlimited.
.PP
-lib , --libraries Folder containing JAR files used by the program.
All JAR files will be added to the classpath during compilation and
launch.
Number of arguments: 0 to 1.
Default value: src/resources/lib.
.PP
-args, --arguments All arguments to pass to the main class.
If you want to pass an argument that starts with `-', escape the `-'
character with two `\[rs]' like this: `-args \[rs]-argument_for_main'.
Number of arguments: unlimited.
.PP
-m , --main Main class to launch.
If you want to launch a class in a package, specify the package with the
class name like this: `package.name.MainClass' Number of arguments: 1.
.PP
-e , --encoding Change the encoding of java files to compile.
Number of arguments: 1.
Default value: UTF-8.
.PP
-exp , --export Create an executable JAR file to launch the project
without installing MavenLite.
Number of arguments: 0 Ã  1.
Default value: run.java.
.PP
-mvn , --maven Convert the project into a Maven project by creating a
pom.xml file and moving files if necessary.
Number of arguments : 0.
.PP
-V , --version Display the version.
Number of arguments : 0.
Default value : 2.0.0.
.PP
-h , --help Display the help and exit.
Number of arguments : 0.
.PP
-clr , --clear Delete files in the output folder of compiled files.
Number of arguments : 0.
.SH RETURN CODES
0: Everything went well.
.PP
1: An error occurred.
.SH FILES
Maven Lite consists of 6 files:
.IP \[bu] 2
\f[CR]\[aq]mvnl\[aq]\f[R], the main file located in the folder
\f[CR]\[aq]/usr/local/bin/\[aq]\f[R].
.IP \[bu] 2
\f[CR]\[aq]mvnl-uninstall\[aq]\f[R], the uninstallation file located in
the folder \f[CR]\[aq]/usr/local/bin/\[aq]\f[R].
.IP \[bu] 2
\f[CR]\[aq]MavenLite.class\[aq]\f[R], the MavenLite class file located
in the \f[CR]\[aq]/usr/local/etc/maven-lite\[aq]\f[R] folder.
.IP \[bu] 2
\f[CR]\[aq]hamcrest-core-1.3.jar\[aq]\f[R], the JAR file of the
Hamcrest-Core library located in the
\f[CR]\[aq]/usr/local/etc/maven-lite\[aq]\f[R] folder.
.IP \[bu] 2
\f[CR]\[aq]junit-4.13.1.jar\[aq]\f[R], the JAR file of the JUnit library
located in the \f[CR]\[aq]/usr/local/etc/maven-lite\[aq]\f[R] folder.
.IP \[bu] 2
\f[CR]\[aq]mvnl.1.gz\[aq]\f[R], the help file containing the manual page
displayed with the \f[CR]\[aq]man mvnl\[aq]\f[R] command located in the
folder \f[CR]\[aq]/usr/local/man/fr/man1/\[aq]\f[R] for the French
version and in the \f[CR]\[aq]/usr/local/man/en/man1/\[aq]\f[R] folder
for the English version.
.SH BUGS
There is only one known bug related to arguments with quotes,
backslashes, etc.
.SH AUTHOR
Written by Robart Floris.
.SH BUG REPORT
Report bugs via email to <florisrobart.pro\[at]gmail.com> specifying
what the bug is, how I can reproduce it, and that it concerns Maven Lite
as well as the version used.
